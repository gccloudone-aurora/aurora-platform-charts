apiVersion: argoproj.io/v1alpha1
kind: ArgoCD
metadata:
  name: argocd
  labels:
    {{- include "argocd-foundation.labels" $ | nindent 4 }}
  finalizers:
    - argoproj.io/finalizer
spec:
  applicationInstanceLabelKey: {{ .Values.argocdInstance.applicationInstanceLabelKey }}

  nodePlacement:
    nodeSelector: {{ toYaml .Values.argocdInstance.nodeSelector | nindent 6 }}
    tolerations: {{ toYaml .Values.argocdInstance.tolerations | nindent 6 }}

  applicationSet:
    image: {{ regexReplaceAll "//+" (printf "%s/%s/%s" .Values.argocdInstance.imageRegistry.host .Values.argocdInstance.imageRegistry.repository .Values.argocdInstance.image.name) "/" }}
    version: {{ .Values.argocdInstance.image.version }}
    logLevel: {{ .Values.argocdInstance.logLevel }}
    resources:  {{ toYaml .Values.argocdInstance.applicationSet.resources | nindent 6 }}

  controller:
    processors: {}
    sharding: {}
    logLevel: {{ .Values.argocdInstance.logLevel }}
    resources:  {{ toYaml .Values.argocdInstance.controller.resources | nindent 6 }}

  dex: {}
  disableAdmin: {{ .Values.argocdInstance.disableAdmin }}
  extraConfig:
    resource.compareoptions: |
      ignoreAggregatedRoles: true
  grafana:
    enabled: false
    ingress:
      enabled: false
    route:
      enabled: false
  ha:
    enabled: false
  initialSSHKnownHosts: {}
  kustomizeBuildOptions: --load-restrictor LoadRestrictionsNone --enable-helm
  image: {{ regexReplaceAll "//+" (printf "%s/%s/%s" .Values.argocdInstance.imageRegistry.host .Values.argocdInstance.imageRegistry.repository .Values.argocdInstance.image.name) "/" }}
  notifications:
    enabled: {{ .Values.argocdInstance.notifications.enabled }}
    logLevel: {{ .Values.argocdInstance.logLevel }}
  {{- if and .Values.argocdInstance.oidcAuthSP.tenantID .Values.argocdInstance.oidcAuthSP.clientID .Values.argocdInstance.oidcAuthSP.clientSecret }}
  oidcConfig: |
    name: aurora
    issuer: {{ printf "https://login.microsoftonline.com/%s/v2.0" .Values.argocdInstance.oidcAuthSP.tenantID }}
    clientID: {{ .Values.argocdInstance.oidcAuthSP.clientID }}
    clientSecret: {{ .Values.argocdInstance.oidcAuthSP.clientSecret }}
    requestedIDTokenClaims:
      groups:
        essential: true
    requestedScopes: ["openid","profile","email"]
  {{- end }}
  prometheus:
    enabled: false
    ingress:
      enabled: false
    route:
      enabled: false
  rbac:
    defaultPolicy: role:readonly
    policy: |
      p, role:org-admin, applications, *, */*, allow
      p, role:org-admin, clusters, get, *, allow
      p, role:org-admin, applicationsets, get, */*, allow
      p, role:org-admin, repositories, get, *, allow
      p, role:org-admin, repositories, create, *, allow
      p, role:org-admin, repositories, update, *, allow
      p, role:org-admin, repositories, delete, *, allow
      p, role:org-admin, accounts, update, *, allow
      g, {{ .Values.argocdInstance.adminSecurityGroup | quote }}, role:org-admin
    scopes: '[groups]'

  redis:
    image: {{ regexReplaceAll "//+" (printf "%s/%s/%s" .Values.argocdInstance.imageRegistry.host .Values.argocdInstance.imageRegistry.repository .Values.argocdInstance.redis.image.name) "/" }}
    version: {{ .Values.argocdInstance.redis.image.version }}
    resources:  {{ toYaml .Values.argocdInstance.redis.resources | nindent 6 }}

  repo:
    image: {{ regexReplaceAll "//+" (printf "%s/%s/%s" .Values.argocdInstance.imageRegistry.host .Values.argocdInstance.imageRegistry.repository .Values.argocdInstance.repo.image.name) "/" }}
    logLevel: {{ .Values.argocdInstance.logLevel }}
    mountsatoken: true
    volumeMounts:
      - mountPath: /etc/ssl/certs/custom.crt
        name: custom-certs
        subPath: custom.crt
    sidecarContainers:
      - command:
          - /var/run/argocd/argocd-cmp-server
        env:
          - name: ARGOCD_ENV_AVP_TYPE
            value: {{ .Values.argocdInstance.argocdVaultPlugin.credentials.avpType }}
          - name: ARGOCD_ENV_AZURE_TENANT_ID
            value: {{ .Values.argocdInstance.argocdVaultPlugin.credentials.azureTenantID }}
          - name: ARGOCD_ENV_AZURE_CLIENT_ID
            value: {{ .Values.argocdInstance.argocdVaultPlugin.credentials.azureClientID }}
          - name: ARGOCD_ENV_AZURE_CLIENT_SECRET
            value: {{ .Values.argocdInstance.argocdVaultPlugin.credentials.azureClientSecret }}
        image: {{ regexReplaceAll "//+" (printf "%s/%s/%s:%s" .Values.argocdInstance.argocdVaultPlugin.imageRegistry.host .Values.argocdInstance.argocdVaultPlugin.imageRegistry.repository .Values.argocdInstance.argocdVaultPlugin.image.name .Values.argocdInstance.argocdVaultPlugin.image.version) "/" }}
        name: avp
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
        volumeMounts:
          - mountPath: /var/run/argocd
            name: var-files
          - mountPath: /home/argocd/cmp-server/plugins
            name: plugins
          - mountPath: /home/argocd/cmp-server/config/plugin.yaml
            name: {{ .Values.argocdInstance.argocdVaultPlugin.configMapName }}
            subPath: avp.yaml
      - command:
          - /var/run/argocd/argocd-cmp-server
        env:
          - name: ARGOCD_ENV_AVP_TYPE
            value: {{ .Values.argocdInstance.argocdVaultPlugin.credentials.avpType }}
          - name: ARGOCD_ENV_AZURE_TENANT_ID
            value: {{ .Values.argocdInstance.argocdVaultPlugin.credentials.azureTenantID }}
          - name: ARGOCD_ENV_AZURE_CLIENT_ID
            value: {{ .Values.argocdInstance.argocdVaultPlugin.credentials.azureClientID }}
          - name: ARGOCD_ENV_AZURE_CLIENT_SECRET
            value: {{ .Values.argocdInstance.argocdVaultPlugin.credentials.azureClientSecret }}
        image: {{ regexReplaceAll "//+" (printf "%s/%s/%s:%s" .Values.argocdInstance.argocdVaultPlugin.imageRegistry.host .Values.argocdInstance.argocdVaultPlugin.imageRegistry.repository .Values.argocdInstance.argocdVaultPlugin.image.name .Values.argocdInstance.argocdVaultPlugin.image.version) "/" }}
        name: avp-helm
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
        volumeMounts:
          - mountPath: /var/run/argocd
            name: var-files
          - mountPath: /home/argocd/cmp-server/plugins
            name: plugins
          - mountPath: /home/argocd/cmp-server/config/plugin.yaml
            name: {{ .Values.argocdInstance.argocdVaultPlugin.configMapName }}
            subPath: avp-helm.yaml
    version: {{ .Values.argocdInstance.repo.image.version }}
    volumes:
      - configMap:
          name: {{ .Values.argocdInstance.argocdVaultPlugin.configMapName }}
        name: {{ .Values.argocdInstance.argocdVaultPlugin.configMapName }}
      - configMap:
          name: custom-certs
          optional: true
        name: custom-certs
    resources:  {{ toYaml .Values.argocdInstance.repo.resources | nindent 6 }}

  resourceCustomizations: |
    kiali.io/Kiali:
      health.lua: |
        local health_status = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              health_status.message = condition.message
              if condition.type == "Successful" and condition.status == "True" then
                health_status.status = "Healthy"
                return health_status
              end
              if condition.type == "Failure" and condition.status == "True" then
                health_status.status = "Degraded"
                return health_status
              end
              if condition.type == "Running" and condition.reason == "Running" then
                health_status.status = "Progressing"
                return health_status
              end
            end
          end
        end
        health_status.status = "Progressing"
        health_status.message = "Waiting for Kiali"
        return health_status
    apiextensions.k8s.io/CustomResourceDefinition:
      ignoreDifferences: |
        jqPathExpressions:
        - .spec.conversion?.webhook?.clientConfig.caBundle
    admissionregistration.k8s.io/MutatingWebhookConfiguration:
      ignoreDifferences: |
        jqPathExpressions:
        - .webhooks[]?.clientConfig.caBundle
        - .webhooks[]?.namespaceSelector.matchExpressions[] | select(.key =="control-plane")
        - .webhooks[]?.namespaceSelector.matchExpressions[] | select(.key =="kubernetes.azure.com/managedby")
        managedFieldsManagers:
        - cainjector
        - domain-mapping-webhook
        - webhook
    admissionregistration.k8s.io/ValidatingWebhookConfiguration:
      ignoreDifferences: |
        jqPathExpressions:
        - .webhooks[]?.clientConfig.caBundle
        - .webhooks[]?.namespaceSelector.matchExpressions[] | select(.key =="control-plane")
        - .webhooks[]?.namespaceSelector.matchExpressions[] | select(.key =="kubernetes.azure.com/managedby")
        managedFieldsManagers:
        - cainjector
        - domain-mapping-webhook
        - webhook
    /ServiceAccount:
      ignoreDifferences: |
        managedFieldsManagers:
        - aurora-controller
  resourceExclusions: |
    - apiGroups:
        - cilium.io
      kinds:
        - CiliumIdentity
      clusters:
        - '*'
    - apiGroups:
        - velero.io
      kinds:
        - Backup
      clusters:
        - '*'
  resourceTrackingMethod: annotation
  server:
    autoscale:
      enabled: {{ .Values.argocdInstance.server.autoscale.enabled }}
    grpc:
      ingress:
        enabled: false
    {{- if .Values.argocdInstance.ingressDomain }}
    host: {{ .Values.argocdInstance.ingressDomain }}
    {{- end }}
    ingress:
      enabled: false
    insecure: true
    logLevel: {{ .Values.argocdInstance.logLevel }}
    route:
      enabled: false
    service:
      type: {{ .Values.argocdInstance.server.service.type }}
    resources:  {{ toYaml .Values.argocdInstance.server.resources | nindent 6 }}

  tls:
    ca: {}
  version: {{ .Values.argocdInstance.image.version }}
